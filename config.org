#+TITLE: My Emacs config file.
#+AUTHOR: Redson
* General settings
** Remove startup message
   #+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-message t)
   #+END_SRC
** Remove bars
   #+BEGIN_SRC emacs-lisp
   (tool-bar-mode -1)
   (menu-bar-mode -1)
   (scroll-bar-mode -1)
   #+END_SRC
** Different backup directory
   #+BEGIN_SRC emacs-lisp
   (setq backup-directory-alist '(("." . "~/.saves")))
   #+END_SRC
** Show matching parenthesis
   #+BEGIN_SRC emacs-lisp
   (show-paren-mode 1)
   #+END_SRC
** Add line counter
   #+BEGIN_SRC emacs-lisp
     (add-hook 'prog-mode-hook 'display-line-numbers-mode)
   #+END_SRC
** Setup MELPA and use-package
   #+BEGIN_SRC emacs-lisp
     (require 'package)
     (setq package-enable-at-startup nil)

     (add-to-list 'package-archives
		  '("melpa" . "https://melpa.org/packages/"))

     (package-initialize)

     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))
#+END_SRC
** Indentation
   #+BEGIN_SRC emacs-lisp
     (setq indent-tabs-mode nil)
     (setq-default electric-indent-inhibit t)
     (electric-pair-mode 1)
   #+END_SRC
** get rid of ".#filename"
#+BEGIN_SRC emacs-lisp
(setq create-lockfiles nil)
#+END_SRC
** Hide org blocks
#+BEGIN_SRC emacs-lisp
(setq org-hide-block-startup t)
#+END_SRC
* UI
** Theme
   #+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-gruvbox t)

  (doom-themes-org-config))
   #+END_SRC
** Icons
   #+BEGIN_SRC emacs-lisp
	(use-package all-the-icons
	:ensure t
        :defer t)
   #+END_SRC
** Set fonts
   #+BEGIN_SRC emacs-lisp
     (set-face-attribute 'default nil :font "UbuntuMono Nerd Font Mono:weight=Regular" :height 120)
   #+END_SRC
** Doom-modeline
   #+BEGIN_SRC emacs-lisp
   (use-package doom-modeline
   :ensure t
   :hook (after-init . doom-modeline-mode))
   #+END_SRC
** dashboard
   #+BEGIN_SRC emacs-lisp
     (use-package dashboard
     :ensure t
     :config
     (dashboard-setup-startup-hook))
	     (setq dashboard-center-content t)
	     (setq dashboard-show-shortcuts nil)
	     (setq dashboard-set-heading-icons t)
	     (setq dashboard-set-file-icons t)
	     (setq dashboard-startup-banner 'logo)
   #+END_SRC
** Word wrap
   #+BEGIN_SRC emacs-lisp
     (visual-line-mode t)
   #+END_SRC
* General Packages
** which-key
   #+BEGIN_SRC emacs-lisp
   (use-package which-key
   :ensure t
   :config
   (progn
   (which-key-setup-side-window-right)
   (which-key-mode)))
   #+END_SRC
** try
   #+BEGIN_SRC emacs-lisp
     (use-package try
     :ensure t
     :defer t)
   #+END_SRC
** evil
   #+BEGIN_SRC emacs-lisp
     (use-package evil
     :ensure t
     :defer 1)
     (require 'evil)
     (evil-mode 1)
   #+END_SRC
** projectile
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
     :ensure t
     :defer 2
     :config
     (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
     (projectile-mode +1))
   #+END_SRC
** page-break-lines
   #+BEGIN_SRC emacs-lisp
     (use-package page-break-lines
     :defer t
     :ensure t)
   #+END_SRC
** elcord
   #+BEGIN_SRC emacs-lisp
     (use-package elcord
     :ensure t
     :config(progn
     (setq elcord-client-id "959486322244976670")
     (setq elcord-editor-icon "emacs")))
     (require 'elcord)
     (elcord-mode)
#+END_SRC

* Languages
** rustic-mode
#+BEGIN_SRC emacs-lisp
(use-package rustic)
(setq rustic-analyzer-command '("~/.local/bin/rust-analyzer"))
#+END_SRC
** lsp-mode
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :ensure t
  :hook (
    (c-mode . lsp)
    (rustic-mode . lsp)
    (lsp-mode . lsp-enable-which-key-integration)
    (lsp-mode . lsp-ui-mode))
    :commands lsp)
(use-package lsp-ui
  :commands lsp-ui-mode
  :init
  :ensure t
  :custom
  (lsp-ui-peek-always-show t)
  (lsp-ui-sideline-show-hover t)
  (lsp-ui-doc-enable nil))

(setq lsp-keymap-prefix "C-c l")
#+END_SRC
** Syntax checker
   #+BEGIN_SRC emacs-lisp
   (use-package flycheck
   :ensure t
   :init (global-flycheck-mode))
   #+END_SRC


