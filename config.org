#+TITLE: My Emacs config file.
* General settings
** Remove startup message
   #+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-message t)
   #+END_SRC
** Remove bars
   #+BEGIN_SRC emacs-lisp
   (tool-bar-mode -1) 
   (menu-bar-mode -1) 
   (scroll-bar-mode -1)
   #+END_SRC
** Different backup directory
   #+BEGIN_SRC emacs-lisp
   (setq backup-directory-alist '(("." . "~/.saves")))
   #+END_SRC
** Show matching parenthesis
   #+BEGIN_SRC emacs-lisp
   (show-paren-mode 1)
   #+END_SRC
** Add line counter
   #+BEGIN_SRC emacs-lisp
   (global-linum-mode t)
   #+END_SRC
** Setup MELPA and use-package
   #+BEGIN_SRC emacs-lisp
     (require 'package)
     (setq package-enable-at-startup nil)

     (add-to-list 'package-archives
		  '("melpa" . "https://melpa.org/packages/"))

     (package-initialize)

     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))
#+END_SRC
** C configuration
   #+BEGIN_SRC emacs-lisp
     (setq c-default-style "linux"
     c-basic-offset 4)
     (electric-pair-mode 1)
   #+END_SRC
** Emacs 29 features
Just In Time compile
#+BEGIN_SRC emacs-lisp
  (when (fboundp 'native-compile-async)
  (setq comp-deferred-compilation t
        comp-deferred-compilation-black-list '("/mu4e.*\\.el$")))
#+END_SRC
pgtk ligatures
#+BEGIN_SRC emacs-lisp
  (when (eq window-system 'pgtk)
  (pgtk-use-im-context t))
#+END_SRC

* UI
** Theme
   #+BEGIN_SRC emacs-lisp
     (use-package doom-themes
     :ensure t
     :config
     (setq doom-themes-enable-bold t    
	doom-themes-enable-italic t) 
     (load-theme 'doom-solarized-dark t)
     ;; Enable custom treemacs theme
     (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
     ;; Corrects (and improves) org-mode's native fontification.
     (doom-themes-org-config)
     :defer 1)
   #+END_SRC
** Icons
   #+BEGIN_SRC emacs-lisp
	(use-package all-the-icons
	:ensure t
        :defer t)
   #+END_SRC
** Set fonts
   #+BEGIN_SRC emacs-lisp
     (set-face-attribute 'default nil :font "Fira Code:weight=medium" :height 120)
   #+END_SRC
** Centaur tabs
   #+BEGIN_SRC emacs-lisp
	  (use-package centaur-tabs
	  :ensure t
	  :demand
	  :config
	  (centaur-tabs-mode t)
	  :bind
	  ("C-<prior>" . centaur-tabs-backward)
	  ("C-<next>" . centaur-tabs-forward)
          :defer 1)
	  (setq centaur-tabs-style "rounded")
	  (setq centaur-tabs-set-icons t)
	  (setq centaur-tabs-set-modified-marker t)
   #+END_SRC

** Doom-modeline
   #+BEGIN_SRC emacs-lisp
   (use-package doom-modeline
   :ensure t
   :hook (after-init . doom-modeline-mode))
   #+END_SRC
** dashboard
   #+BEGIN_SRC emacs-lisp
     (use-package dashboard
     :ensure t
     :config
     (dashboard-setup-startup-hook))
	     (setq dashboard-center-content t)
	     (setq dashboard-show-shortcuts nil)
	     (setq dashboard-set-heading-icons t)
	     (setq dashboard-set-file-icons t)
	     (setq dashboard-startup-banner 'logo)
   #+END_SRC
** Word wrap
   #+BEGIN_SRC emacs-lisp
     (visual-line-mode t)
   #+END_SRC
** Syntax checker
   #+BEGIN_SRC emacs-lisp
   (use-package flycheck
   :ensure t
   :config(global-flycheck-mode))
   #+END_SRC
* General Packages
** which-key
   #+BEGIN_SRC emacs-lisp
   (use-package which-key
   :ensure t
   :config
   (progn
   (which-key-setup-side-window-right)
   (which-key-mode)))
   #+END_SRC
** try
   #+BEGIN_SRC emacs-lisp
     (use-package try
     :ensure t
     :defer t)
   #+END_SRC
** Treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay        0.5
          treemacs-directory-name-transformer      #'identity
          treemacs-display-in-side-window          t
          treemacs-eldoc-display                   'simple
          treemacs-file-event-delay                5000
          treemacs-file-extension-regex            treemacs-last-period-regex-value
          treemacs-file-follow-delay               0.2
          treemacs-file-name-transformer           #'identity
          treemacs-follow-after-init               t
          treemacs-expand-after-init               t
          treemacs-find-workspace-method           'find-for-file-or-pick-first
          treemacs-git-command-pipe                ""
          treemacs-goto-tag-strategy               'refetch-index
          treemacs-indentation                     2
          treemacs-indentation-string              " "
          treemacs-is-never-other-window           nil
          treemacs-max-git-entries                 5000
          treemacs-missing-project-action          'ask
          treemacs-move-forward-on-expand          nil
          treemacs-no-png-images                   nil
          treemacs-no-delete-other-windows         t
          treemacs-project-follow-cleanup          nil
          treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                        'left
          treemacs-read-string-input               'from-child-frame
          treemacs-recenter-distance               0.1
          treemacs-recenter-after-file-follow      nil
          treemacs-recenter-after-tag-follow       nil
          treemacs-recenter-after-project-jump     'always
          treemacs-recenter-after-project-expand   'on-distance
          treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
          treemacs-show-cursor                     nil
          treemacs-show-hidden-files               t
          treemacs-silent-filewatch                nil
          treemacs-silent-refresh                  nil
          treemacs-sorting                         'alphabetic-asc
          treemacs-select-when-already-in-treemacs 'move-back
          treemacs-space-between-root-nodes        t
          treemacs-tag-follow-cleanup              t
          treemacs-tag-follow-delay                1.5
          treemacs-text-scale                      nil
          treemacs-user-mode-line-format           nil
          treemacs-user-header-line-format         nil
          treemacs-wide-toggle-width               70
          treemacs-width                           35
          treemacs-width-increment                 1
          treemacs-width-is-initially-locked       t
          treemacs-workspace-switch-cleanup        nil)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)

    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-evil
  :after (treemacs evil)
  :ensure t)

(use-package treemacs-icons-dired
  :hook (dired-mode . treemacs-icons-dired-enable-once)
  :ensure t)

(use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
  :after (treemacs)
  :ensure t
  :config (treemacs-set-scope-type 'Tabs))
#+END_SRC
** evil
   #+BEGIN_SRC emacs-lisp
     (use-package evil
     :ensure t
     :defer 1)
     (require 'evil)
     (evil-mode 1)
   #+END_SRC
** projectile
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
     :ensure t
     :defer 2
     :config
     (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
     (projectile-mode +1))
   #+END_SRC
** page-break-lines
   #+BEGIN_SRC emacs-lisp
     (use-package page-break-lines
     :defer t
     :ensure t)
   #+END_SRC
   
* Langs config
** Company
   #+BEGIN_SRC emacs-lisp
	  (use-package company
	  :ensure t
          :config(global-company-mode t))
	       (use-package lsp-mode
		 :init
		 ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
		 (setq lsp-keymap-prefix "C-c l")
		 :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
			;;(XXX-mode . lsp)
			;; if you want which-key integration
			(lsp-mode . lsp-enable-which-key-integration))
		 :commands lsp)

	       ;; optionally
	       (use-package lsp-ui :commands lsp-ui-mode)
   #+END_SRC
** Rust
   #+BEGIN_SRC emacs-lisp
	(use-package rustic
       :ensure
       :bind (:map rustic-mode-map
		   ("M-j" . lsp-ui-imenu)
		   ("M-?" . lsp-find-references)
		   ("C-c C-c l" . flycheck-list-errors)
		   ("C-c C-c a" . lsp-execute-code-action)
		   ("C-c C-c r" . lsp-rename)
		   ("C-c C-c q" . lsp-workspace-restart)
		   ("C-c C-c Q" . lsp-workspace-shutdown)
		   ("C-c C-c s" . lsp-rust-analyzer-status))
       :config
       ;; uncomment for less flashiness
       ;; (setq lsp-eldoc-hook nil)
       ;; (setq lsp-enable-symbol-highlighting nil)
       ;; (setq lsp-signature-auto-activate nil)

       ;; comment to disable rustfmt on save
       (setq rustic-format-on-save t)
       (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

     (defun rk/rustic-mode-hook ()
       ;; so that run C-c C-c C-r works without having to confirm, but don't try to
       ;; save rust buffers that are not file visiting. Once
       ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
       ;; no longer be necessary.
       (when buffer-file-name
	 (setq-local buffer-save-without-query t)))
    #+END_SRC
** lsp-mode
   #+BEGIN_SRC emacs-lisp
   (use-package lsp-mode
  :ensure
  :commands lsp
  :custom
  ;; what to use when checking on-save. "check" is default, I prefer clippy
  (lsp-rust-analyzer-cargo-watch-command "clippy")
  (lsp-eldoc-render-all t)
  (lsp-idle-delay 0.6)
  ;; enable / disable the hints as you prefer:
  (lsp-rust-analyzer-server-display-inlay-hints t)
  (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
  (lsp-rust-analyzer-display-chaining-hints t)
  (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
  (lsp-rust-analyzer-display-closure-return-type-hints t)
  (lsp-rust-analyzer-display-parameter-hints nil)
  (lsp-rust-analyzer-display-reborrow-hints nil)
  :config
  (add-hook 'lsp-mode-hook 'lsp-ui-mode))

(use-package lsp-ui
  :ensure t
  :commands lsp-ui-mode
  :custom
  (lsp-ui-peek-always-show t)
  (lsp-ui-sideline-show-hover t)
  (lsp-ui-doc-enable nil))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package elcord
  :ensure t)
  (custom-set-variables
  '(elcord-client-id "959486322244976670")
  '(elcord-editor-icon "emacs")
  )
#+END_SRC
